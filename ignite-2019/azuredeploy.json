{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "userAssignedIdentity": {
            "type": "string",
            "defaultValue": "/subscriptions/ceaedbb7-b827-4195-b55f-de9b6732010b/resourceGroups/bjm/providers/Microsoft.ManagedIdentity/userAssignedIdentities/bjm-msi"
        },
        "newGuid": {
            "type": "string",
            "defaultValue": "[newGuid()]"
        },
        "vaultName": {
            "type": "string",
            "defaultValue": "bmoore-scratch"
        },
        "certificateName": {
            "type": "string",
            "defaultValue": "ignite2019"
        },
        "subjectName": {
            "type": "string",
            "defaultValue": "CN=contoso.com"
        }
    },
    "variables": {
        "scriptName": "createCert"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2019-10-01-preview",
            "name": "[variables('scriptName')]", // default value is newGuid() expression, so it will execute every time
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[parameters('userAssignedIdentity')]": {
                    }
                }
            },
            "kind": "AzurePowerShell",
            "properties": {
                "azPowerShellVersion": "2.7",
                "forceUpdateTag": "[parameters('newGuid')]", // can use this to trigger execution for otherwise duplicate PUTs
                "timeout": "PT30M",
                "retentionInterval": "P1D",
                "cleanupPreference": "OnSuccess",
                "arguments": "[format(' -vaultName {0} -certificateName {1} -subjectName {2}', parameters('vaultName'), parameters('certificateName'), parameters('subjectName'))]", // can pass an arguement string, double quotes must be escaped
                "scriptContent": "

                    param(
                    [string] [Parameter(Mandatory=$false)] $vaultName,
                    [string] [Parameter(Mandatory=$false)] $certificateName,
                    [string] [Parameter(Mandatory=$false)] $subjectName
                    )

                    $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose

                    #private key is added as a secret that can be retrieved in the ARM template
                    Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose

                    $cert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

                    while($cert.Thumbprint -eq $null){
                        Write-Output 'Sleeping...'
                        Start-Sleep 5
                        $cert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName
                    }

                    $DeploymentScriptOutputs = New-Object -TypeName hashtable
                    $DeploymentScriptOutputs['certThumbprint'] = $cert.Thumbprint

                ",
                // these are passed into the ACI instance as environment variables
                "environmentVariables": [
                    {
                        "name": "SqlConnectionString",
                        "secureValue": "test"
                    }
                ]
            }
        }
    ],
    "outputs": {
        "test": {
            "type": "string",
            "value": "[reference(variables('scriptName')).outputs.certThumbprint]"
        }
    }
}
